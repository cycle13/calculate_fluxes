#!/usr/bin/env python
# coding: utf-8

import os
import sys
import shutil
import numpy as np
#sys.path.append(os.getenv('HOME') + "/GitHub/cloud_radiative_effects_from_measurements/RRTMG/")
sys.path.append("/mnt/beegfs/user/phi.richter/ERA5_Home/")
import run_RRTMG_inline as RRTM
import datetime as dt
import pandas as pd
from scipy.interpolate import interp1d
import interpolate_era5

CLIM_RLIQ = 8.0
CLIM_RICE = 20.0

def reff_IFS(lwc):
    rho_wat = 1e6
    k = 0.77
    Ed = 1
    N_d = -1.15e-3 * 50**2 + 0.963 * 50 + 5.3
    reff = (3*lwc/(4 * np.pi * rho_wat * k * (1e6*N_d)))**(1.0/3.0)
    return reff*1e6

def rice_IFS(iwc, temp): 
    a = 1.2351
    b = 0.0105 * (temp - 273.15)
    c = 45.8966 * iwc ** 0.2214
    d = 0.7957 * iwc ** 0.2535
    e = temp - 83.15
    deff = (a + b + (c + d * e))
    return 3 * np.sqrt(3) / 8 * deff

def convert(humd, temp, pres):
    
    R_S = 461.5#J/kg*K
    temp = temp + 273.15
    pres = pres * 100
    humd = humd / 1000.0
    mixing_ratio = ((1.0/humd) - 1)**(-1)
    vapour_pressure = mixing_ratio * pres / (mixing_ratio + 0.622)
    ah = vapour_pressure / (R_S * temp)
    
    return ah

def read_era5_csv(path_albedo, path_sfc_pres):
    era5_albedo = pd.read_csv(path_albedo, parse_dates=[16])
    era5_sfc_pressure = pd.read_csv(path_sfc_pres, parse_dates=[3])
    
    return [era5_albedo, era5_sfc_pressure]

def read_trace_gases(co2_path, co2_vmr, n2o_path, n2o_vmr, ch4_path, ch4_vmr):
    co2_prof = np.loadtxt(co2_path, delimiter=",")
    vmr = np.mean(co2_prof)
    co2_prof = co2_vmr / vmr * co2_prof
    n2o_prof = np.loadtxt(n2o_path, delimiter=",")
    vmr = np.mean(n2o_prof)
    n2o_prof = n2o_vmr / vmr * n2o_prof
    ch4_prof = np.loadtxt(ch4_path, delimiter=",")
    vmr = np.mean(ch4_prof)
    ch4_prof = ch4_vmr / vmr * ch4_prof
    
    return co2_prof, n2o_prof, ch4_prof

def read_era5_cwc(path_era5):
    era5_pres = np.array([1000.0, 975.0, 950.0, 925.0, 900.0, 875.0, 850.0, 825.0, 800.0, 775.0, 750.0, 700.0, 650.0, 600.0, 550.0, 500.0, 450.0, 400.0, 350.0, 300.0, 250.0, 225.0, 200.0, 175.0, 150.0, 125.0, 100.0, 70.0, 50.0, 30.0, 20.0, 10.0, 7.0, 5.0, 3.0, 2.0, 1.0])  
    era5_cwc = pd.read_csv(path_era5)
    
    era5_lwc = np.array(era5_cwc['lwc(kg/kg)'])*1e3
    era5_iwc = np.array(era5_cwc['iwc(kg/kg)'])*1e3

    era5_temp= np.array(era5_cwc['temperature(K)'])
    era5_height = np.array(era5_cwc['height(m)'])
    era5_humd = np.array(era5_cwc['humidity(%)'])
    era5_lwc = convert(era5_lwc, era5_temp, era5_pres)*1e3
    era5_iwc = convert(era5_iwc, era5_temp, era5_pres)*1e3
    
    dz = np.concatenate(([era5_height[0]], np.diff(era5_height)))
    era5_lwp = era5_lwc*dz
    era5_iwp = era5_iwc*dz
    era5_cwp = era5_lwp+era5_iwp
    era5_wpi = np.zeros(era5_cwp.size)
    
    idx_cld = np.where(era5_cwp > 0.0)[0]
    if idx_cld.size > 0:
        era5_wpi[idx_cld] = era5_iwp[idx_cld]/era5_cwp[idx_cld]
    return era5_cwp, era5_wpi, era5_height, era5_humd, era5_temp, era5_pres, era5_lwc, era5_iwc

def only_lowest_level(cwp, wpi, rliq, rice, idx_cloud, height_offset, lowest_level):
    if lowest_level:
        cwp = np.array([cwp[0]])
        wpi = np.array([wpi[0]])
        rliq = np.array([rliq[0]])
        rice = np.array([rice[0]])
        idx_cloud = np.array([idx_cloud[0]+height_offset])
    return cwp, wpi, rliq, rice, idx_cloud

def scale_era5_to_nearest_cwp(era5_albedo, time, cwp, scale_era5_nearest):
    if scale_era5_nearest:
        idx = np.where((np.array(era5_albedo['time']) >= np.datetime64(time)) & \
                       (np.array(era5_albedo['time']) < np.datetime64(time+dt.timedelta(hours=1))))[0]  

        era5_cwp = np.float(era5_albedo['cwp(gm-2)'].iloc[idx])
        #if iwc+lwc > 0.0:
        #    era5_wpi = iwc/(lwc+iwc) * np.ones(cwp.size)
        #else:
        #    era5_wpi = np.zeros(cwp.size)
        cwp = cwp * (era5_cwp/np.sum(cwp))       
    return cwp

def estimate_albedo_from_era5_radiation(era5_albedo, time, use_era5_albedo):
    if use_era5_albedo:
        idx = np.where((np.array(era5_albedo['time']) >= np.datetime64(time)) & \
                       (np.array(era5_albedo['time']) < np.datetime64(time+dt.timedelta(hours=1))))[0]
        albedo_from_era5_radiation = (np.float(era5_albedo['msdwswrf_NON_CDM'].iloc[idx])-\
                                      np.float(era5_albedo['msnswrf_NON_CDM'].iloc[idx]))/ \
                                      np.float(era5_albedo['msdwswrf_NON_CDM'].iloc[idx])
    else:
        albedo_from_era5_radiation = -1000.0
    return albedo_from_era5_radiation
    
def scale_to_era5_pressure(era5_sfc_pressure, time, use_era5_pressure):
    if use_era5_pressure:
        idx = np.where((np.array(era5_sfc_pressure['time']) >= np.datetime64(time)) & \
                       (np.array(era5_sfc_pressure['time']) < np.datetime64(time+dt.timedelta(hours=1))))[0]
        pressure = np.float(era5_sfc_pressure['pressure'].iloc[idx])
    else:
        pressure = -1013.0
    return pressure

def read_era5_cloud_fraction(path_clt, use_era5_clt):
    if use_era5_clt:
        era5_clt = np.float(np.loadtxt(path_clt))
    else:
        era5_clt = 1.0
    return era5_clt

def recalculate_according_to_IFS(plev, recalc_list):
    pres_new = []
    recalc_new = []
    for lay in range(37):
        pres_k = plev[lay]
        if lay == 36:
            pres_k_1 = 0
        else:
            pres_k_1 = plev[lay+1]
        recalc_k = recalc_list[lay]
        if lay == 36:
            recalc_f = interp1d(pres_new, recalc_new, fill_value="extrapolate")
            recalc_k_1 = recalc_f(0.0)
        else:
            recalc_k_1 = recalc_list[lay+1]
            
        pres_k_12 = 0.5*(pres_k + pres_k_1)
        recalc_k_12 = recalc_k * pres_k * (pres_k_1 - pres_k_12) / (pres_k_12 * (pres_k_1 - pres_k)) + \
                    recalc_k_1 * pres_k_1 * (pres_k_12 - pres_k) / (pres_k_12 * (pres_k_1 - pres_k))
        recalc_new.append(recalc_k_12)
        pres_new.append(pres_k_12)
        
    return np.array(recalc_new)

def recalculate_according_to_IFS_swap(plev, p_surf, recalc_list):
    pres_new = []
    recalc_new = []
    for lay in range(36, -1, -1):
        pres_k_1 = plev[lay]
        if lay == 0:
            pres_k = p_surf
        else:
            pres_k = plev[lay-1]
        recalc_k_1 = recalc_list[lay]
        if lay == 0:
            recalc_f = interp1d(pres_new, recalc_new, fill_value="extrapolate")
            recalc_k = recalc_f(p_surf)
        else:
            recalc_k = recalc_list[lay-1]
            
        pres_k_12 = 0.5*(pres_k + pres_k_1)
        recalc_k_12 = recalc_k * pres_k * (pres_k_1 - pres_k_12) / (pres_k_12 * (pres_k_1 - pres_k)) + \
                    recalc_k_1 * pres_k_1 * (pres_k_12 - pres_k) / (pres_k_12 * (pres_k_1 - pres_k))
        recalc_new.append(recalc_k_12)
        pres_new.append(pres_k_12)
        
    return np.flip(np.array(recalc_new), axis=-1)
    
        
def main(month, \
         day, \
         path, \
         pattern, \
         out, \
         semiss, \
         scale_era5_nearest, \
         water_path_era5, \
         lowest_level, \
         use_era5_albedo, \
         use_era5_pressure, \
         era5_wpi, \
         height_offset,\
         use_era5_clt):
    
    co2_vmr = 410.
    n2o_vmr = 0.332
    ch4_vmr = 1.860


    ## Create working directory
    wdir = "{}_{}/".format(month, day)
    if os.path.exists(wdir):
        shutil.rmtree(wdir)
    os.mkdir(wdir)
    os.chdir(wdir)
    
    ## Read ERA5 data
    path_albedo  = os.getenv('HOME') + \
                  "/Data/ERA5_csv/era5_nearest_RAW.csv"
    path_sfc_pres = os.getenv('HOME') + "/Data/ERA5_csv/pressure_era5_nearest_RAW.csv.csv"
    path_clt = os.getenv('HOME') + "/Data/ERA5_csv/clt/"
    era5_csv = read_era5_csv(path_albedo, path_sfc_pres)
    era5_albedo = era5_csv[0]
    era5_sfc_pressure = era5_csv[1]


        
    for file_ in sorted(os.listdir(path)):
            ## Read Trace Gases
        co2_prof, n2o_prof, ch4_prof = read_trace_gases(os.getenv('HOME') + \
                                                        '/Data/input/co2.csv', \
                                                        co2_vmr, \
                                                        os.getenv('HOME') + \
                                                        '/Data/input/n2o.csv', \
                                                        n2o_vmr, \
                                                        os.getenv('HOME') + \
                                                        '/Data/input/ch4.csv', \
                                                        ch4_vmr)
        if ".csv" not in file_:# or pattern not in file_ or '_L_' in file_:
            continue

        diff = 1
        time_str = file_.split("_")[2-diff] + file_.split("_")[3-diff]
        time = dt.datetime.strptime(time_str, "%Y%m%d%H%M%S")
        date_rrtmg = dt.datetime.strftime(time, "%Y%m%d_%H%M%S")

        if time < dt.datetime(2017, month, day):
            continue
        elif time > dt.datetime(2017, month, day) + dt.timedelta(days=1):
            break
        
        ## Read Cloud Water Paths from ERA5

        lat = np.float(file_.split("_")[4-diff])
        lon = np.float(file_.split("_")[5-diff])
        sza = np.float("{}.{}".format(file_.split("_")[6-diff].split(".")[0], file_.split("_")[6-diff].split(".")[1]))
        year = np.int(file_.split("_")[2-diff][:4])
        month = np.int(file_.split("_")[2-diff][4:6])
        day = np.int(file_.split("_")[2-diff][6:])
        hour = np.int(file_.split("_")[3-diff][:2])
        minute = np.int(file_.split("_")[3-diff][2:4])
        sec = np.int(file_.split("_")[3-diff][4:])    
        path_era5 = "/home/phi.richter/Data/ERA5_csv/CWC/ERA5_CWC_{:04d}{:02d}{:02d}_{:02d}{:02d}{:02d}_{}_{}.csv".format(year,month,day,hour,minute,sec,lat,lon)

        ## Use Cloud Water Paths and atmosphere from ERA5
        if water_path_era5:
            try:
                cwp, wpi, height, humd, temp, plev, era5_lwc, era5_iwc = read_era5_cwc(path_era5)
            except FileNotFoundError:
                continue
            dcwp = np.zeros(cwp.size)
            dwpi = np.zeros(cwp.size)
            drliq = np.zeros(cwp.size)
            drice = np.zeros(cwp.size)
            rliq = reff_IFS(era5_lwc)
            rice = rice_IFS(era5_iwc, temp)
            height *= 1e-3
            height = np.around(height, decimals=2)
            idx_cloud = np.where(cwp > 0.0)[0]
            ## Recalculate temperature according to IFS documentation
            p_surf = scale_to_era5_pressure(era5_sfc_pressure, time, True)
            humd = recalculate_according_to_IFS_swap(plev, p_surf, humd)
            temp = recalculate_according_to_IFS_swap(plev, p_surf, temp)
            #rliq = rliq[idx_cloud]
            #rice = rice[idx_cloud]
            #cwp = cwp[idx_cloud]
            #wpi = wpi[idx_cloud]
            #dcwp = np.zeros(cwp.size)
            #dwpi = np.zeros(cwp.size)
            #drliq = np.zeros(cwp.size)
            #drice = np.zeros(cwp.size)
            prof_height = np.loadtxt(os.getenv('HOME') + "/Data/input/z.csv", delimiter=",")
            if co2_prof.size != cwp.size:
                co2_prof = np.interp(height, prof_height, co2_prof)
                n2o_prof = np.interp(height, prof_height, n2o_prof)
                ch4_prof = np.interp(height, prof_height, ch4_prof)
            diff_lwp = 0
            cwp = cwp[idx_cloud]
            wpi = wpi[idx_cloud]
            rliq = rliq[idx_cloud]
            rice = rice[idx_cloud]
            idx_rliq = np.where(rliq > 30.0)[0]
            if idx_rliq.size != 0:
                rliq[idx_rliq] = 30.0
            idx_rliq = np.where(rliq < 4.0)[0]
            if idx_rliq.size != 0:
                rliq[idx_rliq] = 4.0
            idx_rice = np.where(rice > 155.0)[0]
            if idx_rice.size != 0:
                rice[idx_rice] = 155.0
            idx_rice = np.where(rice < 20+40*np.cos(lat*np.pi/180))[0]
            if idx_rice.size != 0:
                rice[idx_rice] = 20+40*np.cos(lat*np.pi/180)
            dcwp = np.zeros(cwp.size)
            dwpi = np.zeros(cwp.size)
            drliq = np.zeros(cwp.size)
            drice = np.zeros(cwp.size)
        else:
            atm = pd.read_csv(path + file_)
            ## Perform averaging
            temp_av = np.array([np.array(atm['temperature(K)'])[0]])
            height_av = np.array([np.array(atm['height(m)'])[0]*1e-3])
            humd_av = np.array([np.array(atm['humidity(%)'])[0]])
            plev_av = np.array([np.array(atm['pressure(hPa)'])[0]])
            lwc_av = np.array([np.array(atm['lwc(kgm-3)'])[0]])
            iwc_av = np.array([np.array(atm['iwc(kgm-3)'])[0]])
            lwc_err_av = np.array([np.array(atm['lwc_err(dB)'])[0]])
            iwc_err_av = np.array([np.array(atm['iwc_err(dB)'])[0]])
            rliq_av = np.array([np.array(atm['rliq(um)'])[0]])
            rice_av = np.array([np.array(atm['rice(um)'])[0]])
            rliq_err_av = np.array([np.array(atm['rliq_err(um)'])[0]])
            rice_err_av = np.array([np.array(atm['rice_err(um)'])[0]])
            lwp_mwr_err = np.float(atm['lwp_err(kgm-2)'].iloc[0])
            diff_lwp = np.float(atm['diff_lwc_lwp(gm-2)'].iloc[0])
            step = 7
            for ii in range(1, np.array(atm['temperature(K)']).size-step-1, step):
                temp_av = np.concatenate((temp_av, [np.mean(np.array(atm['temperature(K)'])[ii:ii+step])]))
                height_av = np.concatenate((height_av, [np.mean(np.array(atm['height(m)'])[ii:ii+step]*1e-3)]))
                humd_av = np.concatenate((humd_av, [np.mean(np.array(atm['humidity(%)'])[ii:ii+step])-0.05*np.mean(np.array(atm['humidity(%)'])[ii:ii+step])]))
                plev_av = np.concatenate((plev_av, [np.mean(np.array(atm['pressure(hPa)'])[ii:ii+step])]))       
                lwc_av = np.concatenate((lwc_av, [1e3*np.mean(np.array(atm['lwc(kgm-3)'])[ii:ii+step])]))
                iwc_av = np.concatenate((iwc_av, [1e3*np.mean(np.array(atm['iwc(kgm-3)'])[ii:ii+step])]))
                lwc_err_av = np.concatenate((lwc_err_av, [np.mean(np.array(atm['lwc_err(dB)'])[ii:ii+step])]))
                iwc_err_av = np.concatenate((iwc_err_av, [np.mean(np.array(atm['iwc_err(dB)'])[ii:ii+step])]))
                
                idx = np.where(np.array(atm['lwc(kgm-3)'])[ii:ii+step] > 0.0)[0]
                idx = idx+ii
                rliq_av = np.concatenate((rliq_av, [np.mean(np.array(atm['rliq(um)'])[idx])]))
                rliq_err_av = np.concatenate((rliq_err_av, [np.mean(np.array(atm['rliq_err(um)'])[idx])]))
                idx = np.where(np.array(atm['iwc(kgm-3)'])[ii:ii+step] > 0.0)[0]
                idx = idx+ii
                rice_av = np.concatenate((rice_av, [np.mean(np.array(atm['rice(um)'])[idx])]))
                rice_err_av = np.concatenate((rice_err_av, [np.mean(np.array(atm['rice_err(um)'])[idx])]))

            for ii in range(np.array(atm['temperature(K)']).size-step, np.array(atm['temperature(K)']).size, 1):
                temp_av = np.concatenate((temp_av, [np.mean(np.array(atm['temperature(K)'])[ii])]))
                humd_av = np.concatenate((humd_av, [np.mean(np.array(atm['humidity(%)'])[ii])-0.05*np.mean(np.array(atm['humidity(%)'])[ii:ii+step])]))
                plev_av = np.concatenate((plev_av, [np.mean(np.array(atm['pressure(hPa)'])[ii])]))
                height_av = np.concatenate((height_av, [np.mean(np.array(atm['height(m)'])[ii]*1e-3)]))
                lwc_av = np.concatenate((lwc_av, [1e3*np.mean(np.array(atm['lwc(kgm-3)'])[ii])]))
                iwc_av = np.concatenate((iwc_av, [1e3*np.mean(np.array(atm['iwc(kgm-3)'])[ii])]))
                lwc_err_av = np.concatenate((lwc_err_av, [np.mean(np.array(atm['lwc_err(dB)'])[ii])]))
                iwc_err_av = np.concatenate((iwc_err_av, [np.mean(np.array(atm['iwc_err(dB)'])[ii])]))
                rliq_av = np.concatenate((rliq_av, [np.mean(np.array(atm['rliq(um)'])[ii])]))
                rliq_err_av = np.concatenate((rliq_err_av, [np.mean(np.array(atm['rliq_err(um)'])[ii])]))
                rice_av = np.concatenate((rice_av, [np.mean(np.array(atm['rice(um)'])[ii])]))
                rice_err_av = np.concatenate((rice_err_av, [np.mean(np.array(atm['rice_err(um)'])[ii])]))
     
            idx_cloud = np.where((lwc_av > 0.0) | (iwc_av > 0.0))[0]
            dz_av = np.concatenate((np.diff(height_av), [0]))

            ## Calculate absolute error
            iwc_err_abs = iwc_av[idx_cloud]*10**iwc_err_av[idx_cloud]*1e-2#1e-2 wegen Prozent
            lwc_err_abs = lwc_av[idx_cloud]*10**lwc_err_av[idx_cloud]*1e-2
            print(lwc_av[idx_cloud], lwc_err_av[idx_cloud])
            print(iwc_av[idx_cloud], iwc_err_av[idx_cloud])
            lwp = lwc_av[idx_cloud] * dz_av[idx_cloud]*1e3
            iwp = iwc_av[idx_cloud] * dz_av[idx_cloud]*1e3
            
            ## Error of IWP
            diwp = iwc_err_abs * dz_av[idx_cloud]*1e3
            dlwp = lwc_err_abs * dz_av[idx_cloud]*1e3
            ## Error of LWP (from MWR)
            #dlwp = lwp_mwr_err * 1e3 / lwp.size * np.ones(lwp.size)
            
            height = height_av
            temp = temp_av
            humd = humd_av
            plev = plev_av
            rliq = rliq_av[idx_cloud]
            rice = rice_av[idx_cloud]                
            drliq = rliq_err_av[idx_cloud]
            for ii in range(len(drliq)):
                if np.isnan(drliq[ii]):
                    drliq[ii] = 0.0
            drice = rice_err_av[idx_cloud]
            for ii in range(len(drice)):
                if np.isnan(drice[ii]):
                    drice[ii] = 0.0
            cwp = lwp + iwp
            wpi = iwp / cwp
            
            idx_noice = np.where(wpi == 0.0)[0]
            if idx_noice.size != 0:
                rice[idx_noice] = 40
            idx_noliq = np.where(wpi == 1.0)[0]
            if idx_noliq.size != 0:
                rliq[idx_noliq] = 10
            ## Error of CWP
            dcwp = np.abs(dlwp) + np.abs(diwp)
            
            ## Error of WPi
            dwpi = np.abs(diwp / cwp) + np.abs(dcwp * iwp / cwp**2)

            for ii in range(len(dcwp)):
                if np.isnan(dcwp[ii]):
                    dcwp[ii] = 0.0
            for ii in range(len(dwpi)):
                if np.isnan(dwpi[ii]):
                    dwpi[ii] = 0.0
 
            prof_height = np.loadtxt(os.getenv('HOME') + "/Data/input/z.csv", delimiter=",")
            if co2_prof.size != height.size:
                co2_prof = np.interp(height, prof_height, co2_prof)
                n2o_prof = np.interp(height, prof_height, n2o_prof)
                ch4_prof = np.interp(height, prof_height, ch4_prof)
                
        ## If only the lowest level is requested
        cwp, wpi, rliq, rice, idx_cloud = only_lowest_level(cwp, \
                                                            wpi, \
                                                            rliq, \
                                                            rice, \
                                                            idx_cloud, \
                                                            height_offset, \
                                                            lowest_level)
            
        ## Scale the water path to the values of ERA5
        cwp = scale_era5_to_nearest_cwp(era5_albedo, time, cwp, scale_era5_nearest)
        
                
        ## Use the albedo estimated from the ERA5 radiation   
        albedo_from_era5_radiation = estimate_albedo_from_era5_radiation(era5_albedo, time, use_era5_albedo)
        
        ## Scale surface pressure
        pressure = scale_to_era5_pressure(era5_sfc_pressure, time, use_era5_pressure)
        if pressure > 0.0:
            idx_cloud += 1
            z_interp = interp1d(plev, height, fill_value="extrapolate")
            t_interp = interp1d(plev, temp, fill_value="extrapolate")
            q_interp = interp1d(plev, humd, fill_value="extrapolate")
            co2_prof = np.concatenate(([co2_prof[0]], co2_prof))
            n2o_prof = np.concatenate(([n2o_prof[0]], n2o_prof))
            ch4_prof = np.concatenate(([ch4_prof[0]], ch4_prof))
            plev = np.concatenate(([pressure], plev))
            height = z_interp(plev)
            temp = t_interp(plev)
            humd = q_interp(plev)
        
        ## Use cloud fraction from ERA5
        clt = read_era5_cloud_fraction(path_clt + \
                                       "era5_clt_{:04d}{:02d}{:02d}_{:02d}{:02d}{:02d}_{}_{}.csv".format(year,month,day,hour,minute,sec,lat,lon), \
                                       use_era5_clt)

        if not water_path_era5:
            oob = np.where((np.array(rliq) < 2.5) & \
                                    (wpi < 1.0))[0].size
            oob+= np.where((np.array(rliq) >60.0) & \
                                    (wpi < 1.0))[0].size
            oob+= np.where((np.array(rice) < 13.0) & \
                                    (wpi > 0.0))[0].size
            oob+= np.where((np.array(rice) > 131.0) & \
                                    (wpi > 0.0))[0].size
            
        else:
            oob = 0
        rice[np.where(wpi == 0.0)[0]] = 40.0
        rliq[np.where(wpi == 1.0)[0]] = 5.0
        print(oob)
        if oob != 0:
            continue

        #pressure = -10
        try:
            date_dt = dt.datetime.strptime(date_rrtmg, "%Y%m%d_%H%M%S")
            if not use_era5_albedo:
                albedo = interpolate_era5.interpolate_ERA5("/mnt/beegfs/user/phi.richter/ERA5_data/ERA5_forecast_albedo_REANALYSIS.nc", "albedo", lat, lon, date_dt)[0]
            else:
                albedo = albedo_from_era5_radiation
            iceconc = interpolate_era5.interpolate_ERA5("/mnt/beegfs/user/phi.richter/ERA5_data/ERA5_surface_radiation_REANALYSIS.nc", "siconca", lat, lon, date_dt)[0]
            with open("{}/diff_lwp_{}_{}.csv".format(out, month, day), "a") as f:
                f.write("{}.nc,{}\n".format(file_.split(".csv")[0], diff_lwp))
            RRTM.main(lat=lat, \
                        lon=lon, \
                        sza=sza, \
                        cwp=cwp, \
                        wpi=wpi, \
                        rl=rliq, \
                        ri=rice, \
                        cloud=idx_cloud, \
                        z=height, \
                        t=temp, \
                        q=humd, \
                        p=plev, \
                        dcwp=dcwp, \
                        dwpi=dwpi, \
                        drl=drliq, \
                        dri=drice, \
                        co2=co2_prof, \
                        n2o=n2o_prof, \
                        ch4=ch4_prof, \
                        albedo_dir=albedo, \
                        albedo_diff=albedo, \
                        iceconc=iceconc, \
                        semiss=semiss, \
                        clt=clt, \
                        fname=out + "/{}.nc".format(file_.split(".csv")[0]))
            exit(-1)
        except Exception:
            print("Exception")
            continue

if __name__ == '__main__':
    
    month = int(sys.argv[1])
    day = int(sys.argv[2])
    pattern = sys.argv[3]
    path_atm = sys.argv[4]
    path_out = sys.argv[5]
    
    ## Broadband surface emissivity for longwave radiation
    semiss = 0.96#float(sys.argv[6])#0.99
    
    ## Scale to ERA5 using the nearest value of ERA5 to the chosen 
    ## temporal and spatial coordinate. Use entire atmospheric column
    scale_era5_nearest = bool(int(sys.argv[7]))#False
    
    ## Use Water Paths on pressure levels from ERA5
    water_path_era5 = bool(int(sys.argv[8]))#True
    
    ## Use only the lowest level of the cloud
    lowest_level = bool(int(sys.argv[9]))#True
    
    ## Calculate the shortwave albedo from ERA5 shortwave radiation
    use_era5_albedo = bool(int(sys.argv[10]))#False
    
    ## Add the surface pressure of ERA5 to the pressure profile
    use_era5_pressure = bool(int(sys.argv[11]))#True
    
    ## Use the ice fraction of ERA5
    era5_wpi = bool(int(sys.argv[12]))#False
    
    ## Increase the height by a number of layers. Only applicable if lowest_level is True
    height_offset = int(sys.argv[13])#10
    
    ## Use cloud fraction given by ERA5
    use_era5_clt = bool(int(sys.argv[14]))#True
    
    if not os.path.exists(path_out):
        os.mkdir(path_out)
    os.chdir(path_out)

    main(month, day, path_atm, pattern, path_out, \
         semiss=semiss, \
         scale_era5_nearest=scale_era5_nearest, \
         water_path_era5=water_path_era5, \
         lowest_level=lowest_level, \
         use_era5_albedo=use_era5_albedo, \
         use_era5_pressure=use_era5_pressure, \
         era5_wpi=era5_wpi, \
         height_offset=height_offset, \
         use_era5_clt=use_era5_clt)
